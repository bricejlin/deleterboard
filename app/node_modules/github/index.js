var request = require('superagent');
var Promise = require('bluebird');
var groupBy = require('lodash.groupby');

var OAUTH = '?client_id=1ce45fb91c0fd87d9c9c&client_secret=514aeb20a5c9a33987d0a4daf2adf9d4f3dbd885';

var mockData = [ 
  { "name" : "Jeffrey Lo",
     "stats" : {
        "additions" : 18,
        "deletions" : 12
      }}, {
        "name" : "Jeff Uthaichai",
        "stats" : {
          "additions" : 3,
          "deletions" : 3
        }
      }, {
        "name" : "Toshio Kuratomi",
        "stats" : {
          "additions" : 287,
          "deletions" : 37
        }
      }, {
        "name" : "Brian Coca",
        "stats" : {
          "additions" : 11,
          "deletions" : 3
        }
      }, {
        "name" : "pkattera",
        "stats" : {
          "additions" : 11,
          "deletions" : 11
        }
      }, {
        "name" : "Dave Garwacke",
        "stats" : {
          "additions" : 43,
          "deletions" : 24
        }
      }, {
        "name" : "Pon",
        "stats" : {
          "additions" : 2709,
          "deletions" : 0
        }
      }, {
        "name" : "Jmeas",
        "stats" : {
          "additions" : 169,
          "deletions" : 69
        }
      }, {
        "name" : "James Kyle",
        "stats" : {
          "additions" : 94,
          "deletions" : 28
        }
      }, {
        "name" : "James Smith",
        "stats" : {
          "additions" : 36,
          "deletions" : 9
        }
      } ];
function github () {  
  function getStats () {
    return fetchRepos()
      .then(getRepoNames)
      .then(fetchCommitsFromEachRepo)
      .then(flatten)
      .then(filterByDate)
      .then(fetchStatsFromEachCommit)
      .then(groupByName)
      .then(sortByStats);
  }

  function sortByStats (users) {
    return users.sort(function (user) {
      return user.stats.delta + user.stats.delta;
    });
  }

  function fetchRepos () {
    var deferred = Promise.defer();
    console.log('fetching repos...');

    request
      .get('https://api.github.com/orgs/warbyparker/repos' + OAUTH)
      .timeout(7000)
      .on('error', function (err) { console.error(err); })
      .end(function (err, res) {
        if (err) {
          deferred.reject(res);
        } else {
          deferred.resolve(res.body);
        }
      });

    return deferred.promise;
  }

  function getRepoNames (repos) {
    return repos.map(function (repo) {
      return repo.name;
    });
  }

  function fetchCommitsFromEachRepo (repos) {
    console.log('fetching commits from each repo...');
    var promises = repos.map(function (repo) {
      return fetchCommits(repo);
    });

    return Promise.all(promises);
  }

  function fetchCommits (repo) {
    var deferred = Promise.defer();
    var url = 'https://api.github.com/repos/warbyparker/' + repo + '/commits' + OAUTH;
    request
      .get(url)
      .timeout(7000)
      .on('error', function (err) { console.error(err); })
      .end(function (err, res) {
        if (err) deferred.reject(res);
        deferred.resolve(res.body);
      });
    return deferred.promise;
  }

  function flatten (arr) {
    console.log('flattening commits...');
    return arr.reduce(function (a, b) {
      return a.concat(b);
    });
  }

  function filterByDate (commits) {
    var date = new Date('3-25-15');

    console.log('filtering for commits after ' + date.toLocaleDateString() + '...');

    return commits.filter(function (commit) {
      var commitDate = new Date(commit.commit.author.date);
      return getUTCDateString(commitDate) >= getUTCDateString(date);
    });
  }

  function fetchStatsFromEachCommit (commits) {
    console.log('fetching commit stats...');
    var promises = commits.map(function (commit) {
      return fetchCommitStats(commit.url)
        .then(function (res) {
          return {
            name: res.commit.author.name,
            stats: res.stats
          };
        });
    });
    return Promise.all(promises);
  }

  function fetchCommitStats (url) {
    var deferred = Promise.defer();
    request
      .get(url + OAUTH)
      .timeout(7000)
      .on('error', function (err) { console.error(err); })
      .end(function (err, res) {
        if (err) deferred.reject(res);
        deferred.resolve(res.body);
      });
    return deferred.promise;
  }

  function groupByName (commits) {
    var namesObj = groupBy(commits, function (commit) {
      return commit.name;
    });

    var people = [];

    for (var name in namesObj) {
      people.push({
        name: name,
        stats: formatStats(namesObj[name])
      });
    }

    return people;
  }

  function formatStats (stats) {
    var obj = { additions: 0, deletions: 0, delta: 0 };
    return stats.reduce(function (p, c) {
      p.additions += c.stats.additions;
      p.deletions += c.stats.deletions;
      p.delta += c.stats.deletions - c.stats.additions;
      return p;
    }, obj);
  }

  function getUTCDateString (date) {
    return date.getUTCFullYear() + '-' + date.getUTCDate() + '-' + date.getUTCMonth();
  }

  return {
    getStats: getStats
  };
}

module.exports = github();